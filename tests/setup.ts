/**\n * Jest setup file for Safe Terminal MCP Server tests\n * Configures testing environment and global test utilities\n */\n\nimport { jest } from '@jest/globals';\n\n// Global test timeout\njest.setTimeout(10000);\n\n// Mock environment variables for testing\nprocess.env.NODE_ENV = 'test';\nprocess.env.LOG_LEVEL = 'error';\nprocess.env.DEFAULT_WORKING_DIR = '/tmp/test';\nprocess.env.ALLOWED_DIRECTORIES = '/tmp/test';\nprocess.env.MAX_REQUESTS_PER_MINUTE = '100';\nprocess.env.COMMAND_TIMEOUT_MS = '5000';\n\n// Create test directories if they don't exist\nimport fs from 'fs';\nimport path from 'path';\n\nconst testDir = '/tmp/test';\nif (!fs.existsSync(testDir)) {\n  fs.mkdirSync(testDir, { recursive: true });\n}\n\n// Global test utilities\nglobal.testUtils = {\n  // Helper to create temporary test files\n  createTestFile: (filename: string, content: string = 'test content') => {\n    const filePath = path.join(testDir, filename);\n    fs.writeFileSync(filePath, content);\n    return filePath;\n  },\n  \n  // Helper to clean up test files\n  cleanupTestFiles: () => {\n    try {\n      const files = fs.readdirSync(testDir);\n      files.forEach(file => {\n        const filePath = path.join(testDir, file);\n        if (fs.statSync(filePath).isFile()) {\n          fs.unlinkSync(filePath);\n        }\n      });\n    } catch (error) {\n      // Ignore cleanup errors in tests\n    }\n  },\n  \n  // Helper to create dangerous command attempts\n  getDangerousCommands: () => [\n    'rm -rf /',\n    'sudo su',\n    'curl evil.com',\n    'wget malicious-site.com',\n    'eval \"dangerous code\"',\n    'nc -l 1234',\n    'dd if=/dev/zero of=/dev/sda',\n    'chmod 777 /etc/passwd',\n    'kill -9 1'\n  ],\n  \n  // Helper to create injection attempts\n  getInjectionAttempts: () => [\n    'ls; rm file',\n    'pwd | cat /etc/passwd',\n    'date && curl evil.com',\n    'echo $(whoami)',\n    'ls `id`',\n    'cat file > /dev/null',\n    'ls < /etc/passwd'\n  ],\n  \n  // Helper to create path traversal attempts\n  getPathTraversalAttempts: () => [\n    '../../../etc/passwd',\n    '../../../../root/.ssh/id_rsa',\n    '/etc/shadow',\n    '/proc/1/environ',\n    '~/.bash_history',\n    'C:\\\\Windows\\\\System32'\n  ]\n};\n\n// Global error handler for unhandled promises\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n});\n\n// Global error handler for uncaught exceptions\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error);\n});\n\n// Clean up before each test\nbeforeEach(() => {\n  // Reset all mocks\n  jest.clearAllMocks();\n  \n  // Clean up test files\n  global.testUtils.cleanupTestFiles();\n});\n\n// Final cleanup after all tests\nafterAll(() => {\n  global.testUtils.cleanupTestFiles();\n});\n\n// Security-focused test matchers\nexpect.extend({\n  toBeSecurityBlocked(received) {\n    const pass = !received.isValid && received.errors && received.errors.length > 0;\n    if (pass) {\n      return {\n        message: () => `Expected command to NOT be blocked, but it was blocked with errors: ${received.errors.join(', ')}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `Expected command to be blocked, but it was allowed`,\n        pass: false,\n      };\n    }\n  },\n  \n  toBeSecurityAllowed(received) {\n    const pass = received.isValid && (!received.errors || received.errors.length === 0);\n    if (pass) {\n      return {\n        message: () => `Expected command to be blocked, but it was allowed`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `Expected command to be allowed, but it was blocked with errors: ${received.errors?.join(', ') || 'unknown errors'}`,\n        pass: false,\n      };\n    }\n  },\n  \n  toContainSecurityError(received, expectedError) {\n    const hasError = received.errors && received.errors.some((error: string) => \n      error.toLowerCase().includes(expectedError.toLowerCase())\n    );\n    if (hasError) {\n      return {\n        message: () => `Expected errors to NOT contain \"${expectedError}\", but found it in: ${received.errors.join(', ')}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `Expected errors to contain \"${expectedError}\", but found: ${received.errors?.join(', ') || 'no errors'}`,\n        pass: false,\n      };\n    }\n  }\n});\n\n// TypeScript declarations for global utilities\ndeclare global {\n  var testUtils: {\n    createTestFile: (filename: string, content?: string) => string;\n    cleanupTestFiles: () => void;\n    getDangerousCommands: () => string[];\n    getInjectionAttempts: () => string[];\n    getPathTraversalAttempts: () => string[];\n  };\n  \n  namespace jest {\n    interface Matchers<R> {\n      toBeSecurityBlocked(): R;\n      toBeSecurityAllowed(): R;\n      toContainSecurityError(expectedError: string): R;\n    }\n  }\n}\n\nexport {};\n
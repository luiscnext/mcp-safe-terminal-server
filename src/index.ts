#!/usr/bin/env node\n\n/**\n * Main entry point for the Safe Terminal MCP Server\n * Handles CLI arguments, environment configuration, and graceful startup\n */\n\nimport { createSafeTerminalServer } from './server.js';\nimport { ServerConfig } from './types/interfaces.js';\nimport { fileURLToPath } from 'url';\nimport path from 'path';\nimport fs from 'fs';\n\n// Get current directory for ES modules\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n/**\n * Load configuration from environment variables and CLI args\n */\nfunction loadConfiguration(): Partial<ServerConfig> {\n  // Default allowed directories (can be overridden)\n  const defaultAllowedDirs = [\n    process.cwd(),\n    path.join(process.env.HOME || '/tmp', 'workspace'),\n    '/tmp/safe'\n  ].filter(dir => {\n    try {\n      return fs.existsSync(dir);\n    } catch {\n      return false;\n    }\n  });\n\n  const config: Partial<ServerConfig> = {\n    port: parseInt(process.env.PORT || '3000'),\n    host: process.env.HOST || 'localhost',\n    maxRequestsPerMinute: parseInt(process.env.MAX_REQUESTS_PER_MINUTE || '30'),\n    commandTimeoutMs: parseInt(process.env.COMMAND_TIMEOUT_MS || '10000'),\n    maxOutputSizeBytes: parseInt(process.env.MAX_OUTPUT_SIZE_BYTES || '1048576'),\n    allowedDirectories: process.env.ALLOWED_DIRECTORIES \n      ? process.env.ALLOWED_DIRECTORIES.split(',').map(dir => dir.trim())\n      : defaultAllowedDirs,\n    defaultWorkingDir: process.env.DEFAULT_WORKING_DIR || process.cwd(),\n    enableGitCommands: process.env.ENABLE_GIT_COMMANDS !== 'false',\n    enableNpmCommands: process.env.ENABLE_NPM_COMMANDS !== 'false',\n    enableSystemInfo: process.env.ENABLE_SYSTEM_INFO !== 'false',\n    logLevel: (process.env.LOG_LEVEL as any) || 'info',\n    logFile: process.env.LOG_FILE || './logs/server.log',\n    auditLogFile: process.env.AUDIT_LOG_FILE || './logs/audit.log'\n  };\n\n  return config;\n}\n\n/**\n * Parse command line arguments\n */\nfunction parseCliArgs(): { config: Partial<ServerConfig>; showHelp: boolean; showVersion: boolean } {\n  const args = process.argv.slice(2);\n  const config: Partial<ServerConfig> = {};\n  let showHelp = false;\n  let showVersion = false;\n\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n    \n    switch (arg) {\n      case '--help':\n      case '-h':\n        showHelp = true;\n        break;\n      \n      case '--version':\n      case '-v':\n        showVersion = true;\n        break;\n      \n      case '--log-level':\n        if (i + 1 < args.length) {\n          config.logLevel = args[++i] as any;\n        }\n        break;\n      \n      case '--working-dir':\n        if (i + 1 < args.length) {\n          config.defaultWorkingDir = args[++i];\n        }\n        break;\n      \n      case '--timeout':\n        if (i + 1 < args.length) {\n          config.commandTimeoutMs = parseInt(args[++i]);\n        }\n        break;\n      \n      case '--max-requests':\n        if (i + 1 < args.length) {\n          config.maxRequestsPerMinute = parseInt(args[++i]);\n        }\n        break;\n      \n      case '--disable-git':\n        config.enableGitCommands = false;\n        break;\n      \n      case '--disable-npm':\n        config.enableNpmCommands = false;\n        break;\n      \n      case '--disable-system-info':\n        config.enableSystemInfo = false;\n        break;\n      \n      default:\n        if (arg.startsWith('--')) {\n          console.warn(`Unknown argument: ${arg}`);\n        }\n    }\n  }\n\n  return { config, showHelp, showVersion };\n}\n\n/**\n * Show help message\n */\nfunction showHelpMessage(): void {\n  console.log(`\nüîß Safe Terminal MCP Server\n\nA secure MCP server for safe terminal command execution with comprehensive security controls.\n\nUsage: npm start [options]\n       node dist/index.js [options]\n\nOptions:\n  -h, --help              Show this help message\n  -v, --version           Show version information\n  --log-level LEVEL       Set log level (error, warn, info, debug) [default: info]\n  --working-dir DIR       Set default working directory [default: current directory]\n  --timeout MS            Set command timeout in milliseconds [default: 10000]\n  --max-requests NUM      Set max requests per minute [default: 30]\n  --disable-git           Disable git commands\n  --disable-npm           Disable npm commands\n  --disable-system-info   Disable system information commands\n\nEnvironment Variables:\n  PORT                    Server port (default: 3000)\n  HOST                    Server host (default: localhost)\n  MAX_REQUESTS_PER_MINUTE Rate limit (default: 30)\n  COMMAND_TIMEOUT_MS      Command timeout (default: 10000)\n  MAX_OUTPUT_SIZE_BYTES   Max output size (default: 1048576)\n  ALLOWED_DIRECTORIES     Comma-separated allowed directories\n  DEFAULT_WORKING_DIR     Default working directory\n  ENABLE_GIT_COMMANDS     Enable git commands (default: true)\n  ENABLE_NPM_COMMANDS     Enable npm commands (default: true)\n  ENABLE_SYSTEM_INFO      Enable system info commands (default: true)\n  LOG_LEVEL              Log level (default: info)\n  LOG_FILE               Main log file (default: ./logs/server.log)\n  AUDIT_LOG_FILE         Audit log file (default: ./logs/audit.log)\n\nSecurity Features:\n  ‚úÖ Command whitelisting with strict validation\n  ‚úÖ Input sanitization and injection prevention\n  ‚úÖ Resource limits (timeout, output size, rate limiting)\n  ‚úÖ Comprehensive audit logging\n  ‚úÖ Working directory restrictions\n  ‚úÖ Environment variable sanitization\n  ‚úÖ Process isolation and cleanup\n\nFor more information, see: https://github.com/luiscnext/mcp-safe-terminal-server\n`);\n}\n\n/**\n * Show version information\n */\nfunction showVersionInfo(): void {\n  const packageJson = JSON.parse(\n    fs.readFileSync(path.join(__dirname, '../package.json'), 'utf8')\n  );\n  \n  console.log(`\nüîß Safe Terminal MCP Server v${packageJson.version}\n\nNode.js: ${process.version}\nPlatform: ${process.platform} ${process.arch}\nUptime: ${process.uptime()}s\n`);\n}\n\n/**\n * Validate configuration\n */\nfunction validateConfiguration(config: Partial<ServerConfig>): void {\n  const errors: string[] = [];\n\n  // Validate directories exist\n  if (config.allowedDirectories) {\n    for (const dir of config.allowedDirectories) {\n      if (!fs.existsSync(dir)) {\n        errors.push(`Allowed directory does not exist: ${dir}`);\n      }\n    }\n  }\n\n  if (config.defaultWorkingDir && !fs.existsSync(config.defaultWorkingDir)) {\n    errors.push(`Default working directory does not exist: ${config.defaultWorkingDir}`);\n  }\n\n  // Validate numeric values\n  if (config.commandTimeoutMs && config.commandTimeoutMs < 1000) {\n    errors.push('Command timeout must be at least 1000ms');\n  }\n\n  if (config.maxRequestsPerMinute && config.maxRequestsPerMinute < 1) {\n    errors.push('Max requests per minute must be at least 1');\n  }\n\n  if (config.maxOutputSizeBytes && config.maxOutputSizeBytes < 1024) {\n    errors.push('Max output size must be at least 1024 bytes');\n  }\n\n  if (errors.length > 0) {\n    console.error('‚ùå Configuration validation failed:');\n    for (const error of errors) {\n      console.error(`   ${error}`);\n    }\n    process.exit(1);\n  }\n}\n\n/**\n * Setup graceful shutdown handlers\n */\nfunction setupShutdownHandlers(server: any): void {\n  const shutdown = async (signal: string) => {\n    console.log(`\\nüõë Received ${signal}, shutting down gracefully...`);\n    \n    try {\n      await server.shutdown();\n      console.log('‚úÖ Server shutdown complete');\n      process.exit(0);\n    } catch (error) {\n      console.error('‚ùå Error during shutdown:', error);\n      process.exit(1);\n    }\n  };\n\n  process.on('SIGINT', () => shutdown('SIGINT'));\n  process.on('SIGTERM', () => shutdown('SIGTERM'));\n  process.on('SIGQUIT', () => shutdown('SIGQUIT'));\n\n  // Handle uncaught exceptions\n  process.on('uncaughtException', (error) => {\n    console.error('üö® Uncaught Exception:', error);\n    shutdown('uncaughtException');\n  });\n\n  process.on('unhandledRejection', (reason, promise) => {\n    console.error('üö® Unhandled Rejection at:', promise, 'reason:', reason);\n    shutdown('unhandledRejection');\n  });\n}\n\n/**\n * Create log directories if they don't exist\n */\nfunction ensureLogDirectories(config: Partial<ServerConfig>): void {\n  const logDirs = [\n    config.logFile ? path.dirname(config.logFile) : './logs',\n    config.auditLogFile ? path.dirname(config.auditLogFile) : './logs'\n  ];\n\n  for (const dir of logDirs) {\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n      console.log(`üìÅ Created log directory: ${dir}`);\n    }\n  }\n}\n\n/**\n * Main function\n */\nasync function main(): Promise<void> {\n  try {\n    // Parse CLI arguments\n    const { config: cliConfig, showHelp, showVersion } = parseCliArgs();\n\n    // Show help or version if requested\n    if (showHelp) {\n      showHelpMessage();\n      return;\n    }\n\n    if (showVersion) {\n      showVersionInfo();\n      return;\n    }\n\n    // Load configuration\n    const envConfig = loadConfiguration();\n    const finalConfig = { ...envConfig, ...cliConfig };\n\n    // Validate configuration\n    validateConfiguration(finalConfig);\n\n    // Ensure log directories exist\n    ensureLogDirectories(finalConfig);\n\n    // Create and start server\n    console.log('üöÄ Starting Safe Terminal MCP Server...');\n    console.log(`üìÅ Working directory: ${finalConfig.defaultWorkingDir}`);\n    console.log(`üìã Allowed directories: ${finalConfig.allowedDirectories?.join(', ')}`);\n    console.log(`üîí Security: Rate limit ${finalConfig.maxRequestsPerMinute}/min, timeout ${finalConfig.commandTimeoutMs}ms`);\n    console.log(`üìä Features: Git=${finalConfig.enableGitCommands}, NPM=${finalConfig.enableNpmCommands}, System=${finalConfig.enableSystemInfo}`);\n    \n    const server = createSafeTerminalServer(finalConfig);\n    \n    // Setup shutdown handlers\n    setupShutdownHandlers(server);\n    \n    // Start the server\n    await server.startStdio();\n    \n    console.log('‚úÖ Safe Terminal MCP Server is running');\n    console.log('üîå Connected via stdio transport');\n    console.log('üõ°Ô∏è  All security controls are active');\n    console.log('üí° Use Ctrl+C to shutdown gracefully\\n');\n\n  } catch (error) {\n    console.error('‚ùå Failed to start server:', error);\n    process.exit(1);\n  }\n}\n\n// Start the server if this is the main module\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch((error) => {\n    console.error('üí• Fatal error:', error);\n    process.exit(1);\n  });\n}\n\nexport { main, loadConfiguration, parseCliArgs, validateConfiguration };\n
/**\n * Type definitions for the Safe Terminal MCP Server\n */\n\nexport interface CommandConfig {\n  name: string;\n  allowedArgs: string[];\n  description: string;\n  category: 'system' | 'git' | 'npm' | 'file';\n  riskLevel: 'low' | 'medium';\n  timeout: number;\n}\n\nexport interface CommandResult {\n  command: string;\n  args: string[];\n  output: string;\n  error: string | null;\n  exitCode: number;\n  duration: number;\n  timestamp: Date;\n  workingDirectory: string;\n}\n\nexport interface SecurityContext {\n  userId?: string;\n  sessionId: string;\n  rateLimitRemaining: number;\n  isAuthenticated: boolean;\n  permissions: string[];\n}\n\nexport interface AuditLogEntry {\n  timestamp: Date;\n  userId?: string;\n  sessionId: string;\n  action: 'command_executed' | 'command_blocked' | 'auth_attempt' | 'rate_limit_hit';\n  command?: string;\n  args?: string[];\n  success: boolean;\n  reason?: string;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\nexport interface ServerConfig {\n  port: number;\n  host: string;\n  maxRequestsPerMinute: number;\n  commandTimeoutMs: number;\n  maxOutputSizeBytes: number;\n  allowedDirectories: string[];\n  defaultWorkingDir: string;\n  enableGitCommands: boolean;\n  enableNpmCommands: boolean;\n  enableSystemInfo: boolean;\n  logLevel: 'error' | 'warn' | 'info' | 'debug';\n  logFile: string;\n  auditLogFile: string;\n}\n\nexport interface CommandWhitelist {\n  [key: string]: CommandConfig;\n}\n\nexport interface ExecutionOptions {\n  cwd?: string;\n  timeout?: number;\n  maxOutputSize?: number;\n  env?: Record<string, string>;\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  sanitizedCommand?: string;\n  sanitizedArgs?: string[];\n}\n\nexport interface RateLimitInfo {\n  remaining: number;\n  reset: Date;\n  limit: number;\n}\n\nexport interface McpToolResult {\n  content: Array<{\n    type: 'text';\n    text: string;\n  }>;\n  isError?: boolean;\n}\n\nexport interface McpResourceContent {\n  uri: string;\n  text?: string;\n  blob?: string;\n  mimeType?: string;\n}\n\nexport interface SessionInfo {\n  id: string;\n  userId?: string;\n  createdAt: Date;\n  lastActivity: Date;\n  commandCount: number;\n  isActive: boolean;\n}\n\n// Error types\nexport class SecurityError extends Error {\n  constructor(message: string, public code: string) {\n    super(message);\n    this.name = 'SecurityError';\n  }\n}\n\nexport class ValidationError extends Error {\n  constructor(message: string, public errors: string[]) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\nexport class RateLimitError extends Error {\n  constructor(message: string, public retryAfter: number) {\n    super(message);\n    this.name = 'RateLimitError';\n  }\n}\n\nexport class CommandExecutionError extends Error {\n  constructor(message: string, public exitCode: number, public stderr: string) {\n    super(message);\n    this.name = 'CommandExecutionError';\n  }\n}\n\n// Utility types\nexport type LogLevel = 'error' | 'warn' | 'info' | 'debug';\nexport type CommandCategory = 'system' | 'git' | 'npm' | 'file';\nexport type RiskLevel = 'low' | 'medium';\nexport type ActionType = 'command_executed' | 'command_blocked' | 'auth_attempt' | 'rate_limit_hit';\n